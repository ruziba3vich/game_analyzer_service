// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: pgn_analizer_protos/pgn_analizer.proto

package pgn_analyzer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChessAnalysisService_AnalyzePGN_FullMethodName         = "/pgn_analyzer.ChessAnalysisService/AnalyzePGN"
	ChessAnalysisService_AnalyzePGNDetailed_FullMethodName = "/pgn_analyzer.ChessAnalysisService/AnalyzePGNDetailed"
	ChessAnalysisService_HealthCheck_FullMethodName        = "/pgn_analyzer.ChessAnalysisService/HealthCheck"
)

// ChessAnalysisServiceClient is the client API for ChessAnalysisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Chess Analysis Service
type ChessAnalysisServiceClient interface {
	// Analyze a PGN and return Elo estimates by phase
	AnalyzePGN(ctx context.Context, in *AnalyzePGNRequest, opts ...grpc.CallOption) (*AnalyzePGNResponse, error)
	// Get detailed analysis with statistics (for debugging/monitoring)
	AnalyzePGNDetailed(ctx context.Context, in *AnalyzePGNRequest, opts ...grpc.CallOption) (*DetailedAnalysisResponse, error)
	// Health check
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type chessAnalysisServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChessAnalysisServiceClient(cc grpc.ClientConnInterface) ChessAnalysisServiceClient {
	return &chessAnalysisServiceClient{cc}
}

func (c *chessAnalysisServiceClient) AnalyzePGN(ctx context.Context, in *AnalyzePGNRequest, opts ...grpc.CallOption) (*AnalyzePGNResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyzePGNResponse)
	err := c.cc.Invoke(ctx, ChessAnalysisService_AnalyzePGN_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chessAnalysisServiceClient) AnalyzePGNDetailed(ctx context.Context, in *AnalyzePGNRequest, opts ...grpc.CallOption) (*DetailedAnalysisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DetailedAnalysisResponse)
	err := c.cc.Invoke(ctx, ChessAnalysisService_AnalyzePGNDetailed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chessAnalysisServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, ChessAnalysisService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChessAnalysisServiceServer is the server API for ChessAnalysisService service.
// All implementations must embed UnimplementedChessAnalysisServiceServer
// for forward compatibility.
//
// Chess Analysis Service
type ChessAnalysisServiceServer interface {
	// Analyze a PGN and return Elo estimates by phase
	AnalyzePGN(context.Context, *AnalyzePGNRequest) (*AnalyzePGNResponse, error)
	// Get detailed analysis with statistics (for debugging/monitoring)
	AnalyzePGNDetailed(context.Context, *AnalyzePGNRequest) (*DetailedAnalysisResponse, error)
	// Health check
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedChessAnalysisServiceServer()
}

// UnimplementedChessAnalysisServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChessAnalysisServiceServer struct{}

func (UnimplementedChessAnalysisServiceServer) AnalyzePGN(context.Context, *AnalyzePGNRequest) (*AnalyzePGNResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzePGN not implemented")
}
func (UnimplementedChessAnalysisServiceServer) AnalyzePGNDetailed(context.Context, *AnalyzePGNRequest) (*DetailedAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzePGNDetailed not implemented")
}
func (UnimplementedChessAnalysisServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedChessAnalysisServiceServer) mustEmbedUnimplementedChessAnalysisServiceServer() {}
func (UnimplementedChessAnalysisServiceServer) testEmbeddedByValue()                              {}

// UnsafeChessAnalysisServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChessAnalysisServiceServer will
// result in compilation errors.
type UnsafeChessAnalysisServiceServer interface {
	mustEmbedUnimplementedChessAnalysisServiceServer()
}

func RegisterChessAnalysisServiceServer(s grpc.ServiceRegistrar, srv ChessAnalysisServiceServer) {
	// If the following call pancis, it indicates UnimplementedChessAnalysisServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChessAnalysisService_ServiceDesc, srv)
}

func _ChessAnalysisService_AnalyzePGN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzePGNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChessAnalysisServiceServer).AnalyzePGN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChessAnalysisService_AnalyzePGN_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChessAnalysisServiceServer).AnalyzePGN(ctx, req.(*AnalyzePGNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChessAnalysisService_AnalyzePGNDetailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzePGNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChessAnalysisServiceServer).AnalyzePGNDetailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChessAnalysisService_AnalyzePGNDetailed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChessAnalysisServiceServer).AnalyzePGNDetailed(ctx, req.(*AnalyzePGNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChessAnalysisService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChessAnalysisServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChessAnalysisService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChessAnalysisServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChessAnalysisService_ServiceDesc is the grpc.ServiceDesc for ChessAnalysisService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChessAnalysisService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pgn_analyzer.ChessAnalysisService",
	HandlerType: (*ChessAnalysisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnalyzePGN",
			Handler:    _ChessAnalysisService_AnalyzePGN_Handler,
		},
		{
			MethodName: "AnalyzePGNDetailed",
			Handler:    _ChessAnalysisService_AnalyzePGNDetailed_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _ChessAnalysisService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pgn_analizer_protos/pgn_analizer.proto",
}
